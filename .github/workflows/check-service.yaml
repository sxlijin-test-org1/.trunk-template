name: trunk
on:
  workflow_dispatch:
    inputs:
      client_payload:
        required: true

###############################################################################
#
# Client payload should be a JSON string that follows the following schema:
#
# {
#   "version": "0.0.0",
#   "target": {
#     "name": [[ repo that we received a webhook for ]],
#     "ref_name":  [[ ref that we received a webhook for ]],
#     "ref_sha": [[ ref that we received a webhook for ]],
#   },
#   "check_mode": "pull_request",
#   "cache": true,
#   "token": [[ the trunk api token for the repo ]],
#   // https://docs.github.com/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
#   "pull_request": [[ the pull_request field in the webhook that we receive ]],
#   "upload_series": "",
# }
#
###############################################################################

jobs:
  check:
    name: Trunk Check
    runs-on: ubuntu-latest
    if: fromJSON(inputs.client_payload).version == '0.0.0'

    steps:
      - name: Test fromjson resolution
        shell: bash
        run: |
          echo "${{ fromJSON(inputs.client_payload).unset_field || 'fallback fiel' }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJSON(inputs.client_payload).target.name }}
          ref: ${{ fromJSON(inputs.client_payload).target.ref_sha }}

      - name: Trunk Check
        uses: trunk-io/trunk-action@sam/check-dot-trunk
        with:
          check-mode: ${{ fromJSON(inputs.client_payload).check_mode }}
          cache: ${{ fromJSON(inputs.client_payload).cache }}
          trunk-token: ${{ fromJSON(inputs.client_payload).token }}
          upload-series: ${{ fromJSON(inputs.client_payload).upload_series }}
        env:
          GITHUB_EVENT_PULL_REQUEST_BASE_SHA: ${{ fromJSON(inputs.client_payload).pull_request.base.sha }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_REPO_FORK: ${{ fromJSON(inputs.client_payload).pull_request.head.repo.fork }}
          GITHUB_EVENT_PULL_REQUEST_HEAD_SHA: ${{ fromJSON(inputs.client_payload).pull_request.head.sha }}
          GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ fromJSON(inputs.client_payload).pull_request.number }}
          GITHUB_REF_NAME: ${{ fromJSON(inputs.client_payload).target.ref_name }}
          GITHUB_REPOSITORY: ${{ fromJSON(inputs.client_payload).target.name }}

